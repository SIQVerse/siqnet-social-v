from django.shortcuts import render, get_object_or_404, redirect
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework import viewsets, permissions
from rest_framework.decorators import action
from rest_framework.response import Response
from .models import CivicPost, Comment
from .forms import CivicPostForm, CommentForm
from .serializers import CivicPostSerializer, CommentSerializer

# üìù List all posts
def post_list_view(request):
    posts = CivicPost.objects.all().order_by('-created_at')
    return render(request, 'siqposts/post_list.html', {'posts': posts})

# üìù View a single post
def post_detail_view(request, post_id):
    post = get_object_or_404(CivicPost, id=post_id)
    comments = post.comments.all().order_by('-created_at')
    return render(request, 'siqposts/post_detail.html', {'post': post, 'comments': comments})

# üìù Create a new post
def post_create_view(request):
    if request.method == 'POST':
        form = CivicPostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.save()
            return redirect('post_detail', post_id=post.id)
    else:
        form = CivicPostForm()
    return render(request, 'siqposts/create_post.html', {'form': form})

# üìù Edit a comment
def comment_edit_view(request, comment_id):
    comment = get_object_or_404(Comment, id=comment_id)
    if request.method == 'POST':
        form = CommentForm(request.POST, instance=comment)
        if form.is_valid():
            form.save()
            return redirect('post_detail', post_id=comment.post.id)
    else:
        form = CommentForm(instance=comment)
    return render(request, 'siqposts/edit_comment.html', {'form': form, 'comment': comment})

# üß† DRF ViewSet: CivicPost
class CivicPostViewSet(viewsets.ModelViewSet):
    queryset = CivicPost.objects.all().order_by('-created_at')
    serializer_class = CivicPostSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)

    @action(detail=True, methods=['post'])
    def like(self, request, pk=None):
        post = self.get_object()
        user = request.user
        if user in post.likes.all():
            post.likes.remove(user)
            return Response({'status': 'unliked'})
        else:
            post.likes.add(user)
            return Response({'status': 'liked'})

# üß† DRF ViewSet: Comment
class CommentViewSet(viewsets.ModelViewSet):
    queryset = Comment.objects.all().order_by('-created_at')
    serializer_class = CommentSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(author=self.request.user)

    @action(detail=True, methods=['post'])
    def like(self, request, pk=None):
        comment = self.get_object()
        user = request.user
        if user in comment.likes.all():
            comment.likes.remove(user)
            return Response({'status': 'unliked'})
        else:
            comment.likes.add(user)
            return Response({'status': 'liked'})
